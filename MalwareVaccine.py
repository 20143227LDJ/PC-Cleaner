import psutil
import os
import hashlib


class MalwareVaccine:
    def __init__(self):
        super().__init__()

    def makeDB(self):
        malwareDB = {
            'EICAR Test': ['44d88612fea8a8f36de82e1278abb02f', 68],  # X5O!P%@AP[4\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*
            'Malware1': ['7f470ee222f44d231716640e3ebd6e85', 43],  # 이 파일은 바이러스 파일입니다.
            'Malware2': ['fc7a13ff56dabbe268f15f6d2492c586', 6]  # 하이
        }
        return malwareDB

    def searchDB(self, hashValue, malwareDB):
        for key, value in malwareDB.items():  # dictionary의 value값들 중 해당 해시값이 존재하면
            if value[0] == hashValue:
                return True, key  # 악성코드 이름과 함께 return
        return False, ''

    def matchingVirus(self, fileLocation):
        malwareDB = self.makeDB()  # DB 가져오기
        sizeDB = map(lambda value: value[1], malwareDB.values())  # value의 index 1인 값들(size들)만 모으기

        fp = open(fileLocation, 'rb')  # 반드시 바이너리 모드로 읽어들여 파일객체 생성
        fileSize = os.path.getsize(fileLocation)
        if fileSize not in sizeDB:  # sizeDB안에 없으면 정상 파일로 진단
            return False

        fbuf = fp.read()  # 파일객체로부터 내용 읽어들여 버퍼에 저장
        fp.close()

        f = hashlib.md5()  # MD5 hash function
        f.update(fbuf)  # hashing!
        hashValue = f.hexdigest()  # 메시지 다이제스트를 얻음(16진수 해시값)

        isMalware, name = self.searchDB(hashValue, malwareDB)  # 구한 해시값을 넣어 악성코드인지, 이름은 뭔지 알아냄
        if isMalware == True:  # 악성코드면
            return True
        else:  # 아니면
            return False


'''if __name__ == '__main__':
    MV = MalwareVaccine()
    MV.matchingVirus('C:/Users/jdl/Desktop/4학년 2학기/메이커스팀/프로그램/malwares/malware2.txt')'''
